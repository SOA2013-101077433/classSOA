#to create a new, empy rails app

>rails new app_name     #succesful if you see the message "your bundle is complete"

#this creates a new directory for our app with several folders
#gemfile specifies what gems our app depends on

>rails server    #to start the app

#open the routes.rb file in the config folder created to change the routes and replaced it with: 

Myrottenpotatoes::Application.routes.draw do
	resoures :movies
	root :to =>redirect('/movies')
end

#Databases and Migrations

#rails is configured by default to use SQLite3, defines 3 environments: production,development and test
#a migration is aportable script for changing the database schema(layout) in a consistent and repeatable way
#we use this to avoid having to write the code two times or when we use databases other SQLite3
#three step process
	1. Create migration describing whta changes to make
	2.Apply the migration to the developmentdatabase.
	3. Update the test database's schema by running rake db:test:prepare
	4.Run tests

>>rails generate migration create_movies

#new file created under db/migrate
 
change the file to the following, to create the table for movies

class CreateMovies < ActiveRecord::Migration
  def up
     create_table 'movies' do |t|
        t.string 'title'
        t.string 'rating'
        t.text 'desription' 
        t.datetime 'release_date'
        t.timestamps
  end
end 

  def down
 drop_table 'movies' 
end
end

#type rake db:migrate to apply the migration and create the table

#Rails uses Actie REcord to connect the models to the dbs

#creat the app/models/movie.rb file with these two lines

class Movie <ActiveRecord::Base
end


#rails console, gives an interactive Ruby prompt with the rails framework

####  Create
starwars = Movie.create!(:title => 'Star Wars',
  :release_date => '25/4/1977', :rating => 'PG')
# note that numerical dates follow European format: dd/mm/yyyy
requiem =  Movie.create!(:title => 'Requiem for a Dream',
  :release_date => 'Oct 27, 2000', :rating => 'R')
#  Creation using separate 'save' method, used when updating existing records
field = Movie.new(:title => 'Field of Dreams',
  :release_date => '21-Apr-89', :rating => 'PG')
field.save!
field.title = 'New Field of Dreams'
####  Read
pg_movies = Movie.where("rating = 'PG'")
ancient_movies = Movie.where('release_date < :cutoff and rating = :rating',
  :cutoff => 'Jan 1, 2000', :rating => 'PG')
pg_movies_2 = Movie.find_by_rating('PG')
Movie.find(3)  # exception if key not found; find_by_id returns nil instead
####  Update
starwars.update_attributes(:description => 'The best space western EVER',
  :release_date => '25/5/1977')
requiem.rating = 'NC-17'
requiem.save!
####  Delete
requiem.destroy
Movie.where('title = "Requiem for a Dream"')
####  Find returns an enumerable
Movie.find_all_by_rating('PG').each do |mov|
  mov.destroy
end


#add initial data to the db (seeding)
#go to db/seeds.rb and put this info

# Seed the RottenPotatoes DB with some movies.
more_movies = [
  {:title => 'Aladdin', :rating => 'G',
    :release_date => '25-Nov-1992'},
  {:title => 'When Harry Met Sally', :rating => 'R',
    :release_date => '21-Jul-1989'},
  {:title => 'The Help', :rating => 'PG-13',
    :release_date => '10-Aug-2011'},
  {:title => 'Raiders of the Lost Ark', :rating => 'PG',
    :release_date => '12-Jun-1981'}
]
# NOTE: the following line temporarily allows mass assignment
# (needed if you used attr_accessible/attr_protected in movie.rb)
Movie.send(:attr_accessible, :title, :rating, :release_date)
more_movies.each do |movie|
  Movie.create!(movie)
end

#after adding this, run rake db:seed to run it

#views and controllers
#app/controllers/movies_controllers.rb create

# This file is app/controllers/movies_controller.rb

class MoviesController < ApplicationController
  def index
    @movies = Movie.all
  end
end

#now create folder in app/views/movies/index.html.haml

%h1 All Movies

%table#movies
  %thead
    %tr
      %th Movie Title
      %th Rating
      %th Release Date
      %th More Info
  %tbody
    - @movies.each do |movie|
      %tr
        %td= movie.title 
        %td= movie.rating
        %td= movie.release_date
        %td= link_to "More about #{movie.title}", movie_path(movie)


#in app/views/layout
#replace the application.html.erb file by application.html.haml that includes

!!! 5
%html
  %head
    %title Rotten Potatoes!
    = stylesheet_link_tag 'application'
    = javascript_include_tag 'application'
    = csrf_meta_tags

  %body
    = yield

#How to create a new movie. go to the index.html.haml file in the views folder and add the following at the end

= link_to 'Add new movie', new_movie_path

#now we need to change the controllers that will be triggered when a user clicks on the lin we just created
#go to the movies_controller.rb file and add a new method

def new
  # default: render 'new' template
end


#no we create the fill in form for entering a new movie
#create new.html.haml file in the views/movies folder

%h2 Create New Movie

= form_tag movies_path, :method => :post do

  = label :movie, :title, 'Title'
  = text_field :movie, :title

  = label :movie, :rating, 'Rating'
  = select :movie, :rating, Movie.all_ratings  ##this didnt work for me! had to use ['g', 'pg-13', 'r', 'nc-17']
 
  = label :movie, :release_date, 'Released On'
  = date_select :movie, :release_date

  = submit_tag 'Save Changes'

#now define 'create' in moview_controllers.rb

def create
  @movie = Movie.create!(params[:movie])
  redirect_to movies_path
  flash[:notice] = "#{@movie.title} was successfully created."
end

#now add the following between %body and =yield on the application.html.haml file

- if flash[:notice]
  #notice.message= flash[:notice]
- elsif flash[:warning]
  #warning.message= flash[:warning]

#be careful with the identation! gave me a lot of problems :(

#now we will try to do the update functionality so that users can edit the movies

-# modify last 2 lines of app/views/movies/show.html.haml to:
= link_to 'Edit info', edit_movie_path(@movie)
= link_to 'Back to movie list', movies_path

#now we need to create view for this: edit.html.haml which will be similar to our new view

%h2 Edit Movie

= form_tag movie_path(@movie), :method => :put do

  = label :movie, :title, 'Title'
  = text_field :movie, 'title'

  = label :movie, :rating, 'Rating'
  = select :movie, :rating, Movie.all_ratings
 
  = label :movie, :release_date, 'Released On'
  = date_select :movie, :release_date

  = submit_tag 'Save Changes'


#modify the movies_controller.rb to define the edit action

def edit
  @movie = Movie.find params[:id]
end

def update
  @movie = Movie.find params[:id]
  @movie.update_attributes!(params[:movie])
  flash[:notice] = "#{@movie.title} was successfully updated."
  redirect_to movie_path(@movie)
end


#DEFINE THE DESTROY ACTION IN MOVIES_CONTROLLER.RB

def destroy
  @movie = Movie.find(params[:id])
  @movie.destroy
  flash[:notice] = "Movie '#{@movie.title}' deleted."
  redirect_to movies_path
end



#add the delete option in the show.html.haml view

= button_to 'Delete', movie_path(@movie), :method => :delete, :confirm => 'Are you sure?'


#Try to use partial view to avoid having to repeat the same code like we did in edit and show views

#first create the _movie_form.html.haml that inclueds:


= label :movie, :title, 'Title'
= text_field :movie, 'title'

= label :movie, :rating, 'Rating'
= select :movie, :rating, Movie.all_ratings

= label :movie, :release_date, 'Released On'
= date_select :movie, :release_date

#now change the edit and new views to use the partial view

%h2 Edit Existing Movie

= form_tag movie_path(@movie), :method => :put do
  = render :partial => 'movie_form'
  = submit_tag 'Update Movie Info'


%h2 Create New Movie

= form_tag '/movies', :method => :post do
  = render :partial => 'movie_form'
  = submit_tag 'Save Changes'


   
